-------------------------------------------------------------------------
Sub ボタン①初期化プログラム()


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    Dim N1入力データ As String: N1入力データ = ws.Range("N1").Text 'N15のセルの文字を取得し変数に格納（VBA画面でのみ変更可能）
        
    If N1入力データ = "判定マーカー(消さないで)" Then           'もし表を編集している途中でボタン①を押したら、エラーコードを表示
        MsgBox "表の編集途中でボタン①を押しています。編集途中で初期化したい場合は" + vbCrLf + "N1セルの「判定マーカー(消さないで)」を消した後にボタン①を押してください。"
        Exit Sub
    End If 'エラーがなければ、以下のプログラムを実行

    'エラーがなければ、以下のプログラムを実行
    '表の形を決定する変数
    Dim 表行始 As Integer: 表行始 = ws.Range("A15").Row    '表の始点(行)を決定する変数（VBA画面でのみ変更可能）
    Dim 表列始 As Integer: 表列始 = ws.Range("A15").Column '表の始点(列)を決定する変数（VBA画面でのみ変更可能）
    Dim 表列終 As Integer: 表列終 = ws.Range("Q7") + 1     'セルの範囲をC57セルの数を変数に格納（列に入力する日数+"日付/時間"セルの個数一つ）
    Dim コマ数 As Integer: コマ数 = ws.Range("U7") + 1     'セルの範囲をC57セルの数を変数に格納（コマ数+"日付/時間"セルの個数一つ）
    Dim 見出束数 As Integer: 見出束数 = ws.Range("Y7")     'セルの範囲をC58セルの数を変数に格納
    
    '表の削除
    Dim 表上削 As Integer: 表上削 = 表行始 - 1                              '表の一行上の位置を特定
    
    ws.Range(Cells(表上削, 表列始), Cells(Rows.Count, Columns.Count)).Clear '表の一行上から最終行まで削除
    ws.Range("B2") = ""                                                     'セルB2の内容を消去（VBA画面でのみ変更可能）
    ws.Range("E2:J2").ClearContents                                         'セルE2からJ2の内容を消去（VBA画面でのみ変更可能）
    ws.Range("E3:J3").ClearContents                                         'セルE3からJ3の内容を消去（VBA画面でのみ変更可能）
    
    '時刻見出作成を作成する関数の呼び出し
    Call 時刻見出作成(表行始, 表列始, コマ数, 見出束数)

    '表の終点を決定する変数
    Dim 表行終 As Integer: 表行終 = ws.Cells(表行始, 表列始).End(xlDown).Row '時刻見出しを利用して表の最終行を測定し、その結果を変数に格納(行)
    
    '罫線を引く関数の呼び出し
    Call 罫線引く(表行始, 表行終, 表列始, 表列終, コマ数, 見出束数)
    
    '選択範囲に文字を入力
    ws.Cells(表行始, 表列始 + 1) = "開始日"
    
    '次の作業を指示するメッセージの表示
    MsgBox "講習開始日をB15のセルに入力してください。"


End Sub

Function 時刻見出作成(ByVal 見行始 As Integer, ByVal 見列始 As Integer, ByVal 見コマ数 As Integer, ByVal 見束数 As Integer)


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")
    
    Dim 時取行 As Integer: 時取行 = Range("Q9").Row
    Dim 時取列始 As Integer: 時取列始 = Range("Q9").Column
    Dim 時取回数 As Integer: 時取回数 = 見コマ数 - 1 '授業開始時刻を入力するセル(Q14から始まる)の最終列を測定（配列が0番目からスタートするため-1する）
    ReDim 時刻配(時取回数) As String
    
    '時刻の取得
    Dim 時刻取列 As Integer: 時刻取列 = 時取列始 '"時取列始"をループで使用するために新しく変数を定義
    
    For 時取変 = 0 To 時取回数
        時刻配(時取変) = Format(Cells(時取行, 時刻取列), "hh:mm") 'セル内の時刻をStringに直しながら配列"時刻配"に格納
        時刻取列 = 時刻取列 + 1
    Next 時取変
    
    
    Dim 見繰終点 As Integer: 見繰終点 = 見コマ数 * 見束数 'ループの回数分、見出しを入れるためのスペースを確保
    Dim 見終行 As Integer: 見終行 = 見行始 + 見コマ数 - 1 '一束の時刻見出しの最終行
    
    For 見変 = 1 To 見繰終点 Step 見コマ数 '入力された見出し数の分だけ繰り返す
        ws.Range(Cells(見行始, 見列始), Cells(見終行, 見列始)).Value = WorksheetFunction.Transpose(時刻配) '配列"時刻配()"をTransposeで横→縦に転置し表の始点から順に配置
        見行始 = 見行始 + 見コマ数
        見終行 = 見終行 + 見コマ数
    Next 見変
 

End Function
    
Function 罫線引く(ByVal 罫行始 As Integer, ByVal 罫行終 As Integer, ByVal 罫列始 As Integer, ByVal 罫列終 As Integer, ByVal 罫コマ数 As Integer, ByVal 罫束数 As Integer)


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")
    
    '格子状の罫線の設定
    ws.Range(Cells(罫行始, 罫列始), Cells(罫行終, 罫列終)).Borders.LineStyle = xlContinuous 'A15セルから表の最終セルまで、線の細さ(Weight)はデフォルトの細(xlThin)
    
    '列の罫線
    With ws.Range(Cells(罫行始, 罫列始), Cells(罫行終, 罫列始))
        .Borders(xlEdgeLeft).Weight = xlThick                                       '外枠(左)を引く　線の細さ(Weight)は最太(xlThin)
        .Borders(xlEdgeRight).Weight = xlThick                                      'A列(時刻見出し)の右側に太線を引く
    End With
    ws.Range(Cells(罫行始, 罫列終), Cells(罫行終, 罫列終)).Borders(xlEdgeRight).Weight = xlThick '外枠(右)を引く
    
    '行の罫線
    Dim 罫繰終点 As Integer: 罫繰終点 = 罫コマ数 * 罫束数 + 1 '(ループの回数分+1)のスペースを確保することで、罫線を最終行{外枠(下)}まで引く
    
    For 罫変 = 1 To 罫繰終点 Step 罫コマ数
        With ws.Range(Cells(罫行始, 罫列始), Cells(罫行始, 罫列終))
            .Borders(xlEdgeTop).Weight = xlThick                     '時刻見出しの上の行に引く{表の外枠(上)を作る}
            .Borders(xlEdgeBottom).Weight = xlThick                  '時刻見出しの下の行に太線を引く
        End With
        罫行始 = 罫行始 + 罫コマ数
    Next 罫変


End Function
-------------------------------------------------------------------------
Sub ボタン②新規シートを日程表に加工するプログラム()


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    Dim B15入力データ As String: B15入力データ = ws.Range("B15").Text 'B15のセルの文字を取得（VBA画面でのみ変更可能）
    Dim N1入力データ As String: N1入力データ = ws.Range("N1").Text    'N15のセルの文字を取得（VBA画面でのみ変更可能）
        
    If B15入力データ = "開始日" Then                      'もし講習開始日をB15のセルに入力していなかったらエラーコードを表示
        MsgBox "講習開始日をB15のセルに入力してください。"
        Exit Sub                                          'プログラムの終了
    ElseIf N1入力データ = "判定マーカー(消さないで)" Then 'もし間違えてボタン②を連続で二度押したら、エラーコードを表示
        MsgBox "ボタン②を連続で二度押しています。この機能は現在使うことができません。" + vbCrLf + "ボタン③を押すか、最初から作業をやり直してください。"
        Exit Sub
    End If
    
    'エラーがなければ、以下のプログラムを実行
    '変数の引継ぎ:表の範囲と形を決定する変数
    Dim 表行始 As Integer: 表行始 = ws.Range("A15").Row    '（VBA画面でのみ変更可能）
    Dim 表列始 As Integer: 表列始 = ws.Range("A15").Column '（VBA画面でのみ変更可能）
    Dim 表列終 As Integer: 表列終 = ws.Range("Q7") + 1
    Dim コマ数 As Integer: コマ数 = ws.Range("U7") + 1
    Dim 見出束数 As Integer: 見出束数 = ws.Range("Y7")
    Dim 表行終 As Integer: 表行終 = ws.Cells(表行始, 表列始).End(xlDown).Row
    
    '日付を自動入力する関数の呼び出し
    Call 日付自動入力(表行始, 表行終, 表列始, 表列終, コマ数, 見出束数)
    
    '土日に色を付ける条件付き書式を設定する関数の呼び出し
    Call 土日条件付書式
    
    '選択範囲を消去
    Dim 表上削 As Integer: 表上削 = 表行始 - 1                   '表の一行上の位置を特定
    Dim 表下削 As Integer: 表下削 = 表行終 + 1                   '表の一行下の位置を特定
    Dim 表右削 As Integer: 表右削 = 表列終 + 1                   '表の一行右の位置を特定
    ws.Range(Cells(表上削, 表列始), Cells(表上削, 表右削)).Clear '表の一行上を削除
    ws.Range(Cells(表下削, 表列始), Cells(表下削, 表右削)).Clear '表の一行下を削除
    ws.Range(Cells(表上削, 表右削), Cells(表下削, 表右削)).Clear '表の一行右を削除
    
    '余分な部分についた条件付き書式設定を初期
    ws.Range(Cells(2, 1), Cells(表上削, Columns.Count)).FormatConditions.Delete
    
    '上記のプログラムで消えてしまった表の下外枠を付けなおす
    ws.Range(Cells(表行終, 表列始), Cells(表行終, 表列終)).Borders(xlEdgeBottom).Weight = xlThick
    
    '関数を挿入
    ws.Range("J2").Formula = "=SUM(E2:I2)"
    ws.Range("J3").Formula = "=COUNTIF(15:1048576,""=0"")" '1048576はエクセルの最終行なので変更不要。（"15"→最初の行はVBA画面でのみ変更可能）
    ws.Range("K3").Formula = "=IF(J2=J3, """", ""エラー: 各教科のコマ数の合計と希望日程表に入力されたコマ数の合計が一致しません。"")"
        
    'ボタン②を連続で二度押すことを防ぐためのエラー判別マーカーを挿入
    ws.Range("N1") = "判定マーカー(消さないで)" '（VBA画面でのみ変更可能）
        
    '次の操作を指示するメッセージの表示
    MsgBox "各教科のコマ数を入力してください。"
    
    
End Sub
 
Function 日付自動入力(ByVal 日行始 As Integer, ByVal 日行終 As Integer, ByVal 日列始 As Integer, ByVal 日列終 As Integer, ByVal 日コマ数 As Integer, ByVal 日束数 As Integer)
    
    
    Set ws = Worksheets("1生徒操作画面（編集厳禁）")
  
    '日付を保管する配列の作成
    Dim 開始日列 As Integer: 開始日列 = 日列始 + 1           '日付の開始場所を特定する（"日/時"見出しが入る一つ分を除く）
    Dim 日付 As Date: 日付 = ws.Cells(日行始, 開始日列)      '入力したデータを参照して日付を自動入力する
    Dim 日配() As Variant
    Dim 日列数 As Integer: 日列数 = 日列終 - 日列始          '一束に入る日付の個数
    Dim 日数 As Integer: 日数 = 日列数 * 日束数 + 日束数 - 1 '配列"日配"の要素数。-1は配列の0番目から格納するため-。+日束数は"日束数"個分の"番兵"を追加するため
    ReDim 日配(日数) As Variant                              '配列を初期化
    
    '日付を配列に格納
    For 日変 = 0 To 日数
        If 日変 = 日列数 Then        'もし変数 "日変"が行幅と同じとき
            日配(日変) = "番兵"      '配列"日付配"に"番兵"というマーカーを追加
            日列数 = 日列数 + 日列終
        Else
            日配(日変) = 日付
            日付 = 日付 + 1          '日付を一つずらす
            GoTo Continue
        End If
Continue:
    Next 日変

    '日付をセルに代入
    Dim 日貼配 As Variant                                   'セルに一括貼り付けをするために、配列"日配"から要素を表の横のサイズに合う個数だけ格納する配列
    Dim 日貼列数 As Integer: 日貼列数 = 日列終 - 日列始 - 1 '一束に入る日付の個数を再定義。ただし、配列"日貼配"が0番目から始まるので-1する。
    ReDim 日貼配(日貼列数) As Variant                       '配列を初期化、配列は"日列数"個を格納可能
    Dim 日取変 As Integer: 日取変 = 0                       '配列"日付配"から要素を取り出す変数
    
    For 日変 = 0 To 日数
        If 日配(日変) = "番兵" Then                                       'もし配列"日付配"から"番兵"というマーカーを取り出したとき
            With ws.Range(Cells(日行始, 開始日列), Cells(日行始, 日列終))
                .Value = 日貼配                                           '配列"日貼配"をセルに代入する。(注)以下五行の順番を変えないこと
                .NumberFormatLocal = "m/d(aaa)"                           '日付表記をyyyy/mm/ddから"m""月""d""日"" (月)に変更"
            End With
            日取変 = 0                                                    '配列"日貼配"の0番目の要素から配列"日配"の要素を再び格納開始
            日行始 = 日行始 + 日コマ数
        Else
            日貼配(日取変) = 日配(日変)                                   '配列"日付配"の0番目から"日列数"番目の要素を取り出し順に配列"日貼配"の0番目から"日列数"番目まで順に代入していく
            日取変 = 日取変 + 1                                           '変数をひとつずらす
            GoTo 継続
        End If
継続:
  Next 日変
    
    
End Function

Function 土日条件付書式()


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    Dim 書式設定一  As FormatCondition
    
    With ws.Rows("1:1048576")                                                                                         'A1からexcelの最終行である1048576行目を利用しているため修正不要
        .FormatConditions.Delete                                                                                      '条件付き書式設定を初期
        Set 書式設定一 = .FormatConditions.Add(Type:=xlExpression, Formula1:="=AND(WEEKDAY(A1,2)>=6,A1<>"""",A1<>1)") '選択範囲に(Formula1:=)と(Type:=xlExpression)を用いて関数(=AND(WEEKDAY(A1,2)>=6,A1<>"",A1<>1))を適用
        With 書式設定一.Interior
            .ThemeColor = ws.Range("AD7")                                                                             '色と濃度を"色番号と濃度表"の各セルの値を参照して指定
            .TintAndShade = ws.Range("AE7")
        End With
    End With
            
            
End Function
-------------------------------------------------------------------------
Sub ボタン③教科を自動で振り分けるプログラム()


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    '変数の引継ぎ:表の範囲と形を決定する変数
    Dim 表行始 As Integer: 表行始 = ws.Range("A15").Row    '（VBA画面でのみ変更可能）
    Dim 表列始 As Integer: 表列始 = ws.Range("A15").Column '（VBA画面でのみ変更可能）
    Dim 表列終 As Integer: 表列終 = ws.Range("Q7") + 1
    Dim コマ数 As Integer: コマ数 = ws.Range("U7") + 1
    Dim 見出束数 As Integer: 見出束数 = ws.Range("Y7")
    Dim 表行終 As Integer: 表行終 = ws.Cells(表行始, 表列始).End(xlDown).Row
    
    '入力された各教科の合計数を変数に格納
    Dim 合計 As Integer: 合計 = ws.Range("J2").Value - 1 '配列が0番目から始まるため-1する
    
    '各教科のコマ数の合計が希望表にあるコマ数の合計と一致しているか確認
    If Not ws.Range("J3").Value - 1 = 合計 Then
        'もし一致していなければ、エラーメッセージを表示
        MsgBox "各教科のコマ数の合計と希望コマ数の合計が一致していません。"
        Exit Sub
    ElseIf ws.Range("J3").Value = 0 Or ws.Range("J3").Value = "" Then
        'もし合計が0なら、エラーメッセージを表示
        MsgBox "各教科のコマ数を入力してください。"
        Exit Sub
    End If 'もし一致していたら、以下のプログラムを実行
    
    '教科名を格納する配列
    Dim 教取行 As Integer: 教取行 = ws.Range("Q11").Row
    Dim 教取列始 As Integer: 教取列始 = ws.Range("Q11").Column
    Dim 教取列終 As Integer: 教取列終 = ws.Cells(教取行, 教取列始).End(xlToRight).Column
    Dim 教科名配 As Variant: 教科名配 = ws.Range(Cells(教取行, 教取列始), Cells(教取行, 教取列終))
    
    '教科名を格納するための関数を呼び出し
    ReDim 教科納済(合計) As String
    
    教科納済() = 教科格納(教科名配, 合計)
        
    '---配列の要素をランダムに入れ替え---
    ReDim 教科乱済(合計) As String
    
    教科乱済() = 教科シャッフル(教科納済())
    
    '---シャッフル後の配列"教科"をセルに貼り付け---
    Call 教科探索とセル貼付(教科乱済(), 教科名配, 表行始, 表行終, 表列始, 表列終)
    
    '選択範囲を消去
    Range("J3").ClearContents
    
    '関数を挿入
    Range("E3").Formula = "=COUNTIF(15:1048576,""=季　英語"")"
    Range("F3").Formula = "=COUNTIF(15:1048576,""=季　国語"")"
    Range("G3").Formula = "=COUNTIF(15:1048576,""=季　数学"")"
    Range("H3").Formula = "=COUNTIF(15:1048576,""=季　社会"")"
    Range("I3").Formula = "=COUNTIF(15:1048576,""=季　理科"")"
    Range("J3").Formula = "=SUM(E3:I3)"
    
    '次の作業を指示するメッセージの表示
    MsgBox "「確認用」の欄の数字が入力したコマ数と同じかを確認して" + vbCrLf + "ボタン④を押してください。"

End Sub

Function 教科格納(ByVal 納教名配 As Variant, ByVal 教合計 As Integer)
    
    
    Set ws = Worksheets("1生徒操作画面（編集厳禁）")
    
    Range("AC11").Clear '列の終了位置を正確に測定するためにAC11セルを消去
    
    '各教科のコマ数を格納する配列
    Dim コマ数取行 As Integer: コマ数取行 = ws.Range("E2").Row        '（VBA画面でのみ変更可能
    Dim コマ数取列始 As Integer: コマ数取列始 = ws.Range("E2").Column '（VBA画面でのみ変更可能
    Dim コマ数取列終 As Integer: コマ数取列終 = コマ数取列始 + ws.Range("D2").Column
    Dim コマ数配 As Variant: コマ数配 = ws.Range(Cells(コマ数取行, コマ数取列始), Cells(コマ数取行, コマ数取列終)) '表から各教科のコマ数を取得
    
    '教科を各コマ数分に格納する配列
    ReDim 教科(教合計) As String
    
    'コマ数を格納した配列から各教科のコマ数を取り出す変数と、教科の名前を取り出す変数
    Dim コ数配Index As Integer: コ数配Index = 1                    '二次元配列"コマ数配"から要素を取り出すための変数
    Dim 教名配Index As Integer: 教名配Index = 1                    '二次元配列"教名配"から要素を取り出すための変数
    Dim Index累積 As Integer: Index累積 = コマ数配(1, コ数配Index) '配列"コマ数配"内の数字を足し合わせるための変数
     
    '日付を配列"教科()"に格納
    For 教格納変 = 0 To 教合計
        If 教格納変 = Index累積 Then                         '二次元配列"コマ数配()"の1行目の1列目
            コ数配Index = コ数配Index + 1                    'コ数配Indexを一つずらす
            Index累積 = Index累積 + コマ数配(1, コ数配Index) '配列"コマ数配"内の次の要素(コマ数)を加算
            教名配Index = 教名配Index + 1                    'コ数配Indexを一つずらす
            教科(教格納変) = 納教名配(1, 教名配Index)        'コ数配Indexが一つずれた状態で配列"納教名配"から要素を取り出す
        Else
            教科(教格納変) = 納教名配(1, 教名配Index)        '二次元配列"納教名配()"の1行目の1列目の要素から順に一次元配列"教科()"に代入
            GoTo Continue
        End If
Continue:
    Next 教格納変
    
    教科格納 = 教科()
    
End Function
    
Function 教科シャッフル(ByRef 教納済() As String)

    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    Dim Index終 As Integer: Index終 = UBound(教納済) '配列の最後のインデックス番号を格納する変数
    Dim 乱数 As Integer                              '乱数を格納する変数
    Dim 乱一時保存 As String                           'ランダムに選ばれた教科を一時的に格納する変数
    
    If Index終 < 1 Then                         '教科が一つの時は配列をシャッフルしない
        MsgBox "新規シートを作成してください。" 'メッセージの表示
        Exit Function
    End If
    
    Randomize '乱数の初期化
    
    For 替変 = Index終 To 0 Step -1  '最大のIndex番号から0まで減少させながら、以下を(最大のIndex番号+1=配列の要素数)回分実行する
        乱数 = Int((替変 + 1) * Rnd) '乱数の生成
        乱一時保存 = 教納済(乱数)    '一次元配列"教納済()"に0以上要素数以下のランダムな整数を代入する
        教納済(乱数) = 教納済(替変)  '教納済(乱数)を教納済(替変)に交換する
        教納済(替変) = 乱一時保存    '教納済(替変)を"一時保存"(=教納済(替変)代入前の教納済(乱数))に交換する
    Next 替変

    教科シャッフル = 教納済


End Function

Function 教科探索とセル貼付(ByRef 探貼教乱済() As String, ByVal 探貼教名配 As Variant, ByVal 教行始 As Integer, ByVal 教行終 As Integer, ByVal 教列始 As Integer, ByVal 教列終 As Integer)

    
    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    Dim 教行数 As Integer: 教行数 = 教行終 - 教行始 + 1 '表の行数
    Dim セル As Variant: セル = ws.Range(Cells(教行始, 教列始), Cells(教行終, 教列終)) 'シート指定された範囲(A15セルから表の最終セルまで)を配列"セル"に格納する
    Dim 教乱配Index As Integer: 教乱配Index = 0                                     '配列"教科"から要素を取り出すための変数
    
    For 教行変 = 1 To 教行数                                                        '←もっと早いアルゴリズムがあるのでは？
        For 教列変 = 1 To 教列終                               '縦一列目から下方向に検索開始
            If セル(教行変, 教列変) = "0" Then                 'もしセルに"0"と表示されていたら
                セル(教行変, 教列変) = 探貼教乱済(教乱配Index) '一次元配列"探貼教乱済"の0番目から順に教科を選んで"0"を置き換える
                教乱配Index = 教乱配Index + 1                  '教名配Indexを一つずらす
            ElseIf セル(教行変, 教列変) = "1" Then
                セル(教行変, 教列変) = 探貼教名配(1, 6)        'もしセルに"1"と表示されていたら二次元配列"探貼教名配()"の1行目の6列目の要素を取り出して置き換える
            ElseIf セル(教行変, 教列変) = "2" Then
                セル(教行変, 教列変) = 探貼教名配(1, 7)        '以下五教科分繰り返す
            ElseIf セル(教行変, 教列変) = "3" Then
                セル(教行変, 教列変) = 探貼教名配(1, 8)
            ElseIf セル(教行変, 教列変) = "4" Then
                セル(教行変, 教列変) = 探貼教名配(1, 9)
            ElseIf セル(教行変, 教列変) = "5" Then
                セル(教行変, 教列変) = 探貼教名配(1, 10)
            Else                                              'もし"0"から"5"までの数字でなければ
                GoTo Continue                                 '上記の作業をスキップする
            End If
Continue:
        Next 教列変
    Next 教行変                                     '一列目が終わったら二列目の検索を開始
    
    ws.Range(Cells(教行始, 教列始), Cells(教行終, 教列終)) = セル '編集した配列"セル"をシートに貼り付け
    
    
End Function
-------------------------------------------------------------------------
Sub ボタン④新規シート作成と既存シートのデータをコピーペーストするプログラム()


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    Dim 名前 As String: 名前 = ws.Range("B2") 'Worksheets("2操作画面（編集厳禁）")から生徒名をコピー（VBA画面でのみ変更可能）
    Dim シート検索 As Worksheet
    
    If 名前 = "" Then 'もし生徒名が入力されていない場合、エラーコードを表示
        MsgBox "生徒名を入力してください。"
        Exit Sub
    End If 'エラーがなければ、以下のプログラムを実行
    
    For Each シート検索 In Sheets                               'シートの中から同じ生徒名のシートがないかFor Eachループで探す
        If シート検索.Name = 名前 Then
            MsgBox "同じ生徒の希望日程表を二度作成しています。" 'あればエラーメッセージを表示
            Exit Sub
        End If
    Next シート検索 'エラーがなければ、以下のプログラムを実行
    
    ws.Copy after:=ws         'Worksheets("2操作画面（編集厳禁）")を複製
    ActiveSheet.Name = "仮名" '複製したシートに仮名をつける
    
    '新しい表の調整
    With Worksheets("仮名")      '余分な部分の削除
        .Rows("3:14").Delete     'シート"仮名"の3行目から14行目を削除（VBA画面でのみ変更可能）
        .Range("P1:XFD2").Delete 'P1:からXFD2セルのメモ欄を削除。XFDセルはexcelの最終列であるため修正不要
        .Range("N1").Clear       'N1セルの判定マーカーを削除
    End With
    
    '---（以下のセル表記はすべてVBA画面でのみ変更可能）---
    Dim 余白上 As Double: 余白上 = ws.Range("Q3")     '上の余白はQ3セルを参照
    Dim 余白下 As Double: 余白下 = ws.Range("R3")     '下の余白はR3セルを参照
    Dim 余白右 As Double: 余白右 = ws.Range("S3")     '左の余白はS3セルを参照
    Dim 余白左 As Double: 余白左 = ws.Range("T3")     '右の余白はT3セルを参照
    Dim 行高 As Double: 行高 = ws.Range("U3")         '行の高さはU3セルを参照
    Dim 列幅 As Double: 列幅 = ws.Range("V3")         '列の幅はV3セルを参照
    Dim フォント As String: フォント = ws.Range("W3") '文字書式はW3セルを参照
    Dim 文字大 As Double: 文字大 = ws.Range("X3")     '文字サイズはX3セルを参照

    Call ページレイアウトと文字書式(余白上, 余白下, 余白右, 余白左, 行高, 列幅, 文字大, フォント)

    '条件付き書式の設定
    Dim 行始 As Integer: 行始 = Worksheets("仮名").Range("A3").Row                   '表の始まりの範囲(行)
    Dim 行終 As Integer: 行終 = Worksheets("仮名").Range("A3").End(xlDown).Row       '表の最終位置を測定して結果を変数に格納(行)
    Dim 列始 As Integer: 列始 = Worksheets("仮名").Range("A3").Column                '表の始まりの範囲(列)
    Dim 列終 As Integer: 列終 = Worksheets("仮名").Range("A3").End(xlToRight).Column '表の最終位置を測定して結果を変数に格納(列)
    '---（VBA画面でのみ変更可能）ここまで---
    
    Call 条件付書式(行始, 行終, 列始, 列終)
    
    '複製したシートの名前を生徒名に変更
    Worksheets("仮名").Name = 名前
    
    '初期化できるようにN1セルの判定マーカーを削除
    ws.Range("N1").ClearContents
    
    'ファイルを保存
    ActiveWorkbook.Save
    
    
End Sub

Function ページレイアウトと文字書式(ByVal ぺ余白上 As Double, ByVal ぺ余白下 As Double, ByVal ぺ余白右 As Double, ByVal ぺ余白左 As Double, ByVal ぺ行高 As Double, ByVal ぺ列幅, ByVal ぺ文字大 As Double, ByVal ぺフォント As String)


    'ページレイアウト
    With Worksheets("仮名").PageSetup
        .TopMargin = Application.CentimetersToPoints(ぺ余白上)    '上の余白を変更 (Application.CentimetersToPointsはcmを1ポイント=約0.35mmに変換するメソッド)
        .BottomMargin = Application.CentimetersToPoints(ぺ余白下) '下の余白を変更
        .LeftMargin = Application.CentimetersToPoints(ぺ余白右)   '左の余白を変更
        .RightMargin = Application.CentimetersToPoints(ぺ余白左)  '右の余白を変更
        .HeaderMargin = 0                                         'ヘッダーを0にする
        .FooterMargin = 0                                         'フッターを0にする
        .CenterVertically = True                                  '印刷位置を垂直方向のページ中央にする
        .CenterHorizontally = True                                '印刷位置を水平方向のページ中央にする
    End With
    
    '文字書式
    With Worksheets("仮名").Cells
        .FormatConditions.Delete                             '書式設定を初期
        .RowHeight = Application.CentimetersToPoints(ぺ行高) '行の高さを変更
        .ColumnWidth = ぺ列幅                                '列の幅を変更
        .Font.Name = ぺフォント                              'フォントを変更
        .Font.Size = ぺ文字大                                '文字サイズを変更
        .VerticalAlignment = xlTop                           '垂直方向の文字配置を上揃えにする
        .HorizontalAlignment = xlCenter                      '水平方向の文字配置を中央揃えにする
    End With


End Function

Function 条件付書式(ByVal 条行始 As Integer, ByVal 条行終 As Integer, ByVal 条列始 As Integer, ByVal 条列終 As Integer)


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    Dim 書式設定一  As FormatCondition
    Dim 書式設定二  As FormatCondition
    Dim 書式設定三  As FormatCondition
    Dim 書式設定四  As FormatCondition
    Dim 書式設定五  As FormatCondition
    
    '---（以下のセル表記はすべてVBA画面でのみ変更可能）---
    With Worksheets("仮名").Range(Cells(条行始, 条列始), Cells(条行終, 条列終)) '教科別の書式設定
        Set 書式設定一 = .FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:=ws.Range("Q11").Value) 'セルの値(Formula1:=Range("Q11"))を参照して(Type:=xlCellValue、例:季　英語)と完全一致(Operator:=xlEqual)しているセルに書式を適用
        With 書式設定一.Interior
            .ThemeColor = ws.Range("AD2")   'ThemeColorは色一覧の列
            .TintAndShade = ws.Range("AE2") 'TintAndShadeは基本色 +QQ%の場所（％を小数表記）
        End With
        Set 書式設定二 = .FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:=ws.Range("R11").Value)
        With 書式設定二.Interior
            .ThemeColor = ws.Range("AD3")
            .TintAndShade = ws.Range("AE3")
        End With
        Set 書式設定三 = .FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:=ws.Range("S11").Value)
        With 書式設定三.Interior
            .ThemeColor = ws.Range("AD4")
            .TintAndShade = ws.Range("AE4")
        End With
        Set 書式設定四 = .FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:=ws.Range("T11").Value)
        With 書式設定四.Interior
            .ThemeColor = ws.Range("AD5")
            .TintAndShade = ws.Range("AE5")
        End With
        Set 書式設定五 = .FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:=ws.Range("U11").Value)
        With 書式設定五.Interior
            .ThemeColor = ws.Range("AD6")
            .TintAndShade = ws.Range("AE6")
        End With
    End With
    '---ここまで---


End Function
-------------------------------------------------------------------------

-------------------------------------------------------------------------
Sub ボタン⑥書式設定()


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    Dim 余白上 As Double: 余白上 = ws.Range("Q3")      '上の余白はQ3セルを参照
    Dim 余白下 As Double: 余白下 = ws.Range("R3")      '下の余白はR3セルを参照
    Dim 余白右 As Double: 余白右 = ws.Range("S3")      '左の余白はS3セルを参照
    Dim 余白左 As Double: 余白左 = ws.Range("T3")      '右の余白はT3セルを参照
    Dim 行高 As Double: 行高 = ws.Range("U3")          '行の高さはU3セルを参照
    Dim 列幅 As Double: 列幅 = ws.Range("V3")          '列の幅はV3セルを参照
    Dim フォント As String: フォント = ws.Range("W3")  '文字書式はW3セルを参照
    Dim 文字大 As Double: 文字大 = ws.Range("X3")      '文字サイズはX3セルを参照
   
    Call ページレイアウトと文字書式(余白上, 余白下, 余白右, 余白左, 行高, 列幅, 文字大, フォント)

    'K3セルの文字書式
    ws.Range("K3").HorizontalAlignment = xlLeft '水平方向の文字配置を左揃えにする
    'N1セルの文字書式
    ws.Range("N1").HorizontalAlignment = xlLeft '水平方向の文字配置を左揃えにする
    'Q3セルの文字書式
    ws.Range("U4").HorizontalAlignment = xlLeft '水平方向の文字配置を左揃えにする
    'AF1セルの文字書式
    ws.Range("AF1").HorizontalAlignment = xlLeft '水平方向の文字配置を左揃えにする
    'AF2セルの文字書式
    ws.Range("AF2").HorizontalAlignment = xlLeft '水平方向の文字配置を左揃えにする

End Sub

Function ページレイアウトと文字書式(ByVal ぺ余白上 As Double, ByVal ぺ余白下 As Double, ByVal ぺ余白右 As Double, ByVal ぺ余白左 As Double, ByVal ぺ行高 As Double, ByVal ぺ列幅 As Double, ByVal ぺ文字大 As Double, ByVal ぺフォント As String)

    Set ws = Worksheets("1生徒操作画面（編集厳禁）")

    'ページレイアウト
    With ws.PageSetup
        .TopMargin = Application.CentimetersToPoints(ぺ余白上)    '上の余白を変更 (Application.CentimetersToPointsはcmを1ポイント=約0.35mmに変換するメソッド)
        .BottomMargin = Application.CentimetersToPoints(ぺ余白下) '下の余白を変更
        .LeftMargin = Application.CentimetersToPoints(ぺ余白右)   '左の余白を変更
        .RightMargin = Application.CentimetersToPoints(ぺ余白左)  '右の余白を変更
        .HeaderMargin = 0                                         'ヘッダーを0にする
        .FooterMargin = 0                                         'フッターを0にする
        .CenterVertically = True                                  '印刷位置を垂直方向のページ中央にする
        .CenterHorizontally = True                                '印刷位置を水平方向のページ中央にする
    End With
    
    '文字書式
    With ws.Cells
        .RowHeight = Application.CentimetersToPoints(ぺ行高) '行の高さを変更
        .ColumnWidth = ぺ列幅                                '列の幅を変更
        .Font.Name = ぺフォント                              'フォントを変更
        .Font.Size = ぺ文字大                                '文字サイズを変更
        .VerticalAlignment = xlTop                           '垂直方向の文字配置を上揃えにする
        .HorizontalAlignment = xlCenter                      '水平方向の文字配置を中央揃えにする
    End With


End Function
-------------------------------------------------------------------------
Sub ボタン⑦表の設定をすべてデフォルトにする()


    Set ws = Worksheets("1生徒操作画面（編集厳禁）")
    
    '余白の上下左右、行の高さ、列の幅、フォント、字大きさの初期化
    ws.Range("Q3") = 2.5         '余白の上
    ws.Range("R3") = 2.5         '余白の下
    ws.Range("S3") = 2           '余白の右
    ws.Range("T3") = 2           '余白の左
    ws.Range("U3") = 0.48        '行の高さ
    ws.Range("V3") = 7.35        '列の幅
    ws.Range("W3") = "Yu Gothic" 'フォント
    ws.Range("X3") = 10          '字大きさ
    
    '列に入力する日数、一日のコマ数、見出しの束数の初期化
    ws.Range("Q7") = 14 '列に入力する日数
    ws.Range("U7") = 9  '一日のコマ数
    ws.Range("Y7") = 3  '見出しの束数の初期化
    
    '教科名の初期化
    ws.Range("Q11:AB11").ClearContents
    
    Dim 教科名 As Variant: 教科名 = Array("季　英語", "季　国語", "季　数学", "季　社会", "季　理科", "英語", "国語", "数学", "社会", "理科")
    
    ws.Range("Q11:Z11") = 教科名
    
    '科目数の初期化
    ws.Range("D2") = 5
    
    '各コマの開始時間の初期化
    ws.Range("Q9:AP9").ClearContents
    
    Dim 時刻 As Variant: 時刻 = Array("日/時", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00")
    
    ws.Range("Q9:Z9") = 時刻
    
    '条件付き書式の色設定
    '色番号
    ws.Range("AD2") = 10
    ws.Range("AD3") = 9
    ws.Range("AD4") = 8
    ws.Range("AD5") = 6
    ws.Range("AD6") = 5
    ws.Range("AD7") = 7
    '色濃度
    ws.Range("AE2") = 0.6
    ws.Range("AE3") = 0.6
    ws.Range("AE4") = 0.6
    ws.Range("AE5") = 0.6
    ws.Range("AE6") = 0.6
    ws.Range("AE7") = 0.6
    
    
End Sub
-------------------------------------------------------------------------
